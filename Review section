{% schema %}
{
  "name": "Modern Reviews",
  "tag": "section",
  "settings": [
    { "type": "text", "id": "section_title", "label": "Section Title", "default": "Customer Reviews" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "See what our customers are saying" },
    { "type": "color", "id": "background_color", "label": "Background Color", "default": "#EFECEC" },
    { "type": "range", "id": "section_padding", "label": "Section Padding", "min": 40, "max": 200, "step": 10, "default": 80 },

    { "type": "range", "id": "review_width", "label": "Review Card Width", "min": 240, "max": 400, "step": 10, "default": 300 },
    { "type": "range", "id": "review_height", "label": "Review Card Height", "min": 220, "max": 500, "step": 10, "default": 340 },

    { "type": "range", "id": "title_font_size", "label": "Review Title Font Size (px)", "min": 16, "max": 48, "step": 1, "default": 23 },
    { "type": "range", "id": "title_min_height", "label": "Review Title Min Height (px)", "min": 20, "max": 80, "step": 2, "default": 40 },

    { "type": "range", "id": "body_font_size", "label": "Review Body Font Size (px)", "min": 12, "max": 24, "step": 1, "default": 15 },
    { "type": "range", "id": "body_line_height", "label": "Review Body Line Height", "min": 1, "max": 2, "step": 0.1, "default": 1.5 },
    { "type": "color", "id": "body_text_color", "label": "Review Body Text Color", "default": "#333333" },
    { "type": "range", "id": "body_min_height", "label": "Review Body Min Height (px)", "min": 40, "max": 200, "step": 5, "default": 70 },

    { "type": "image_picker", "id": "verified_badge_image", "label": "Verified Badge Image" },

    { "type": "range", "id": "hover_lift", "label": "Hover Lift (px)", "min": 0, "max": 15, "step": 1, "default": 8 },
    { "type": "range", "id": "card_gap", "label": "Gap Between Cards (px)", "min": 10, "max": 40, "step": 2, "default": 20 },

    { "type": "color", "id": "progress_bar_color", "label": "Scrollbar Handle Color", "default": "#8FC452" },
    { "type": "color", "id": "progress_track_color", "label": "Scrollbar Track Color", "default": "#E0E0E0" },
    { "type": "range", "id": "progress_bar_height", "label": "Scrollbar Height", "min": 4, "max": 16, "step": 1, "default": 8 },
    { "type": "range", "id": "progress_bar_radius", "label": "Scrollbar Radius", "min": 2, "max": 16, "step": 1, "default": 4 },

    { "type": "range", "id": "arrow_radius", "label": "Arrow Border Radius", "min": 0, "max": 50, "step": 1, "default": 50 }
  ],
  "blocks": [
    {
      "type": "review",
      "name": "Review",
      "settings": [
        { "type": "text", "id": "title", "label": "Review Title", "default": "Amazing Product!" },
        { "type": "textarea", "id": "content", "label": "Review Content", "default": "This product exceeded my expectations in every way." },
        { "type": "text", "id": "author", "label": "Author Name", "default": "Jane Doe" },
        { "type": "number", "id": "rating", "label": "Rating (1–5)", "default": 5 },
        { "type": "color", "id": "background_color", "label": "Card Background Color", "default": "#ffffff" }
      ]
    }
  ],
  "max_blocks": 30,
  "presets": [{ "name": "Modern Reviews", "category": "Testimonials" }]
}
{% endschema %}

<div class="review-section" style="background-color: {{ section.settings.background_color }}; padding: {{ section.settings.section_padding }}px 0;">
  <div class="page-width">
    <div class="section-header" style="text-align:center; margin-bottom:40px;">
      <h2 style="margin:0 0 10px;">{{ section.settings.section_title }}</h2>
      <p style="margin:0; color:#555;">{{ section.settings.subheading }}</p>
    </div>
  </div>

  <div class="review-scroll-wrapper" id="wrapper-{{ section.id }}">
    <div class="review-scroll" id="reviewScroll-{{ section.id }}">
      {% for block in section.blocks %}
        {% assign rating = block.settings.rating | default: 5 %}
        {% if rating > 5 %}{% assign rating = 5 %}{% endif %}
        {% if rating < 1 %}{% assign rating = 1 %}{% endif %}

        <div class="review-item-wrapper">
          <div class="review-item" style="background-color: {{ block.settings.background_color }};">
            <div class="review-inner">
              <div class="review-rating">{% for i in (1..rating) %}★{% endfor %}</div>

              <h3 class="review-title" style="
                font-size: {{ section.settings.title_font_size }}px;
                min-height: {{ section.settings.title_min_height }}px;
              ">{{ block.settings.title }}</h3>

              <p class="review-text" style="
                font-size: {{ section.settings.body_font_size }}px;
                line-height: {{ section.settings.body_line_height }};
                color: {{ section.settings.body_text_color }};
                min-height: {{ section.settings.body_min_height }}px;
              ">{{ block.settings.content }}</p>

              <div class="review-author">
                <span>{{ block.settings.author }}</span>
                {% if section.settings.verified_badge_image != blank %}
                  <img src="{{ section.settings.verified_badge_image | img_url: '32x32' }}" alt="Verified Badge" class="verified-badge">
                {% else %}
                  <svg width="18" height="18" viewBox="0 0 22 21" fill="none">
                    <path d="M7.47 20.85L5.6 17.7L2.06 16.92L2.41 13.28L0 10.53L2.41 7.77L2.06 4.14L5.6 3.35L7.47 0.21L10.81 1.63L14.15 0.21L16.02 3.35L19.56 4.14L19.22 7.77L21.62 10.53L19.22 13.28L19.56 16.92L16.02 17.7L14.15 20.85L10.81 19.42L7.47 20.85ZM9.78 14.02L15.33 8.46L13.96 7.04L9.78 11.22L7.67 9.15L6.29 10.53L9.78 14.02Z" fill="#8FC452"/>
                  </svg>
                {% endif %}
                <span>Verified Buyer</span>
              </div>

            </div>
          </div>
        </div>
      {% endfor %}
    </div>

    <button class="review-arrow left" id="left-{{ section.id }}">&#10094;</button>
    <button class="review-arrow right" id="right-{{ section.id }}">&#10095;</button>
  </div>
</div>

{% style %}
/* === Wrapper & Fade Masks === */
.review-scroll-wrapper {
  position: relative;
}
.review-scroll-wrapper::before,
.review-scroll-wrapper::after {
  content: '';
  position: absolute;
  top: 0;
  height: 100%;
  z-index: 3;
  pointer-events: none;
  filter: blur(3px);
}
@media(min-width:769px) {
  .review-scroll-wrapper::before,
  .review-scroll-wrapper::after { width: 280px; }
  .review-scroll-wrapper::before { 
    left: 0; 
    background: linear-gradient(to right, {{ section.settings.background_color }} 0%, rgba(239,236,236,0.001) 50%, rgba(239,236,236,0.004) 100%);
  }
  .review-scroll-wrapper::after { 
    right: 0; 
    background: linear-gradient(to left, {{ section.settings.background_color }} 0%, rgba(239,236,236,0.001) 50%, rgba(239,236,236,0.004) 100%);
  }
}
@media(max-width:768px) {
  .review-scroll-wrapper::before,
  .review-scroll-wrapper::after { width: 100px; }
  .review-scroll-wrapper::before { 
    left: 0; 
    background: linear-gradient(to right, {{ section.settings.background_color }} 0%, rgba(239,236,236,0.002) 50%, rgba(239,236,236,0.006) 100%);
  }
  .review-scroll-wrapper::after { 
    right: 0; 
    background: linear-gradient(to left, {{ section.settings.background_color }} 0%, rgba(239,236,236,0.002) 50%, rgba(239,236,236,0.006) 100%);
  }
}

/* === Scroll Container === */
.review-scroll {
  display: flex;
  gap: {{ section.settings.card_gap }}px;
  overflow-x: auto;
  overflow-y: visible;
  padding: 20px 20px 50px;
  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;
  scrollbar-width: thin;
  scrollbar-color: {{ section.settings.progress_bar_color }} {{ section.settings.progress_track_color }};
  --scrollbar-opacity: 0;
  transition: scrollbar-color 0.3s;
}
.review-scroll-wrapper:hover .review-scroll {
  --scrollbar-opacity: 1;
}

@media(min-width: 769px) {
  .review-scroll {
    padding-left: 40px;
    padding-right: 40px;
  }
}
@media(max-width: 768px) {
  .review-scroll {
    padding-left: 16px;
    padding-right: 16px;
  }
}

/* === Review Items === */
.review-item-wrapper {
  flex: 0 0 auto;
  width: {{ section.settings.review_width }}px;
  height: {{ section.settings.review_height }}px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: visible;
}

.review-item {
  width: 100%;
  height: 100%;
  border-radius: 16px;
  box-shadow: 0 8px 24px rgba(53, 53, 53, 0.2);
  transition: transform 0.35s cubic-bezier(0.34,1.56,0.64,1), box-shadow 0.35s;
  scroll-snap-align: center;
  will-change: transform;
  position: relative;
  z-index: 3;
  background-clip: padding-box;
}
.review-item:hover {
  transform: translateY(-{{ section.settings.hover_lift }}px);
  box-shadow: 0 12px 36px rgba(0,0,0,0.25);
  z-index: 3;
}

/* === Inner Content === */
.review-inner {
  padding: 24px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  height: 100%;
  position: relative;
}
.review-rating {
  color: #FFD700;
  font-size: 1.5rem;
  margin-bottom: 8px;
  text-align: center;
  flex-shrink: 0;
}
.review-title {
  font-weight: 600;
  text-align: center;
  margin-bottom: 10px;
  flex-shrink: 0;
  font-size: {{ section.settings.title_font_size }}px;
  min-height: {{ section.settings.title_min_height }}px;
}
.review-text {
  text-align: center;
  flex-grow: 1;
  margin-bottom: 20px;
  font-size: {{ section.settings.body_font_size }}px;
  line-height: {{ section.settings.body_line_height }};
  color: {{ section.settings.body_text_color }};
  min-height: {{ section.settings.body_min_height }}px;
}

/* === Author Badge === */
.review-author {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 30px;
  background: #fff;
  font-weight: 600;
  font-size: 0.9rem;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
  position: absolute;
  bottom: -14px;
  left: 50%;
  transform: translateX(-50%);
  white-space: nowrap;
  flex-shrink: 0;
}
.verified-badge {
  width: 18px;
  height: 18px;
}

/* Modern Arrows */
.review-arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: #fff;
  color: #333; /* arrow color */
  border: none;
  font-size: 1.8rem;
  width: 48px;  /* make button circular */
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 3;
  border-radius: 50%; /* fully circular */
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.review-arrow:hover {
  background: #f8f8f8;
  color: #000;
  transform: translateY(-50%) scale(1.1);
}

.review-scroll-wrapper:hover .review-arrow {
  opacity: 1;
}

.review-arrow.left { left: 8px; }
.review-arrow.right { right: 8px; }

/* Mobile tweaks */
@media (max-width: 768px) {
  .review-arrow {
    width: 40px;
    height: 40px;
    font-size: 1.5rem;
  }
}

@media (max-width: 768px) {
  .review-author {
    position: absolute;
    bottom: -6%;
    left: 50%;
    transform: translateX(-50%);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 20px;      /* increased horizontal padding from 16px → 20px */
    border-radius: 30px;
    background: #fff;
    font-weight: 600;
    min-width: fit-content;  
    max-width: 95%;          
    box-sizing: border-box;
    justify-content: center;
    white-space: nowrap;     
    overflow-x: auto;        
    scrollbar-width: none;   
  }

  .review-author::-webkit-scrollbar {
    display: none;          
  }

  .review-author span {
    display: inline-block;
    white-space: nowrap;
    font-size: 0.8rem;      
  }

  .verified-badge {
    width: 18px;
    height: 18px;
    flex-shrink: 0;
  }
}

/* === Custom Scrollbar Webkit === */
.review-scroll::-webkit-scrollbar {
  height: {{ section.settings.progress_bar_height }}px;
}
.review-scroll::-webkit-scrollbar-track {
  background: {{ section.settings.progress_track_color }};
  border-radius: {{ section.settings.progress_bar_radius }}px;
}
.review-scroll::-webkit-scrollbar-thumb {
  background-color: {{ section.settings.progress_bar_color }};
  border-radius: {{ section.settings.progress_bar_radius }}px;
  opacity: var(--scrollbar-opacity, 0);
  transition: opacity 0.3s, background 0.3s;
}
.review-scroll::-webkit-scrollbar-thumb:hover {
  background-color: {{ section.settings.progress_bar_color }};
}
{% endstyle %}

<script>
document.addEventListener("DOMContentLoaded", () => {
  const container = document.getElementById(`reviewScroll-{{ section.id }}`);
  const cards = Array.from(container.querySelectorAll('.review-item'));
  const leftArrow = document.getElementById(`left-{{ section.id }}`);
  const rightArrow = document.getElementById(`right-{{ section.id }}`);
  const cardWidth = {{ section.settings.review_width }};
  const gap = {{ section.settings.card_gap }};
  const scrollStep = cardWidth + gap;
  let maxScroll = container.scrollWidth - container.offsetWidth;
  let cardCenters = cards.map(c => c.offsetLeft + c.offsetWidth / 2);
  let ticking = false;

  const updateCenterCard = () => {
    if (ticking) return;
    ticking = true;
    requestAnimationFrame(() => {
      const center = container.scrollLeft + container.offsetWidth / 2;
      for (let i = 0; i < cards.length; i++) {
        const distance = Math.abs(center - cardCenters[i]);
        const popFactor = 1 - Math.min(distance / (container.offsetWidth / 2), 1);
        cards[i].classList.toggle('center', distance < cards[i].offsetWidth / 2);
        cards[i].querySelector('.review-rating')?.style.setProperty(
          'transform', `translateY(${-5 * popFactor}px)`
        );
      }
      ticking = false;
    });
  };

  leftArrow.addEventListener('click', () => container.scrollBy({ left: -scrollStep, behavior: 'smooth' }));
  rightArrow.addEventListener('click', () => container.scrollBy({ left: scrollStep, behavior: 'smooth' }));
  container.addEventListener('scroll', updateCenterCard);
  window.addEventListener('resize', () => {
    maxScroll = container.scrollWidth - container.offsetWidth;
    cardCenters = cards.map(c => c.offsetLeft + c.offsetWidth / 2);
    updateCenterCard();
  });
  updateCenterCard();

  // Drag functionality for desktop
  if (!/Android|iPhone|iPad|iPod/i.test(navigator.userAgent)) {
    let isDragging = false, startX = 0, scrollStart = 0, velocity = 0, lastX = 0;
    container.style.cursor = 'grab';
    let animationFrameDrag;

    const animateDrag = () => {
      velocity *= 0.95;
      container.scrollLeft += velocity;
      if (container.scrollLeft < 0) velocity += (0 - container.scrollLeft) * 0.08;
      if (container.scrollLeft > maxScroll) velocity += (maxScroll - container.scrollLeft) * 0.08;
      updateCenterCard();
      if (Math.abs(velocity) > 0.2 || container.scrollLeft < 0 || container.scrollLeft > maxScroll) {
        animationFrameDrag = requestAnimationFrame(animateDrag);
      }
    };

    container.addEventListener('mousedown', e => {
      if (e.target.closest('.review-arrow')) return;
      isDragging = true;
      startX = e.pageX;
      scrollStart = container.scrollLeft;
      lastX = startX;
      velocity = 0;
      container.style.cursor = 'grabbing';
      cancelAnimationFrame(animationFrameDrag);
      e.preventDefault();
    });

    container.addEventListener('mousemove', e => {
      if (!isDragging) return;
      const delta = e.pageX - startX;
      container.scrollLeft = scrollStart - delta;
      velocity = lastX - e.pageX;
      lastX = e.pageX;
      updateCenterCard();
    });

    const stopDrag = () => {
      if (!isDragging) return;
      isDragging = false;
      container.style.cursor = 'grab';
      animateDrag();
    };

    container.addEventListener('mouseup', stopDrag);
    container.addEventListener('mouseleave', stopDrag);
  }
});
</script>
